{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get Set Hedge About Given the rise of assets under passive management and particularly because of rise of ETFs, stock prices might be driven based on the ETF performance of ETF\u2019s that the stock is part of, in addition to the underlying business fundamentals. Get Set Hedge is a framework which a discretionary investor might want to use in case he likes a certain stock but does not like certain factors it is exposed to. The way we do this is by pre-creating multiple academic factors and allowing the investor to request for building a custom factor(at some price of course). Get Set Hedge perform historical factor validation analysis and produce robust hedges the investor needs to do. In order to execute those hedges in market an investor can use relevant ETFs.","title":"Get Set Hedge"},{"location":"#get-set-hedge","text":"","title":"Get Set Hedge"},{"location":"#about","text":"Given the rise of assets under passive management and particularly because of rise of ETFs, stock prices might be driven based on the ETF performance of ETF\u2019s that the stock is part of, in addition to the underlying business fundamentals. Get Set Hedge is a framework which a discretionary investor might want to use in case he likes a certain stock but does not like certain factors it is exposed to. The way we do this is by pre-creating multiple academic factors and allowing the investor to request for building a custom factor(at some price of course). Get Set Hedge perform historical factor validation analysis and produce robust hedges the investor needs to do. In order to execute those hedges in market an investor can use relevant ETFs.","title":"About"},{"location":"Frequently%20Asked%20Questions/","text":"Frequently Asked Questions What is hedging? Hedging is a risk management strategy employed to offset losses in investments by taking an opposite position in a related asset. The best way to understand hedging is to think of it as a form of insurance. When people decide to hedge, they are insuring themselves against a negative event's impact on their finances. This doesn't prevent all negative events from happening. However, if a negative event does happen and you're properly hedged, the impact of the event is reduced. In practice, hedging occurs almost everywhere. For example, if you buy homeowner's insurance, you are hedging yourself against fires, break-ins, or other unforeseen disasters. Source What is ETF? An exchange traded fund (ETF) is a basket of securities that trade on an exchange, just like a stock. ETF share prices fluctuate all day as the ETF is bought and sold; this is different from mutual funds that only trade once a day after the market closes. ETFs can contain all types of investments including stocks, commodities, or bonds; some offer U.S. only holdings, while others are international. ETFs offer low expense ratios and fewer broker commissions than buying the stocks individually. Source What is Factor Construction? Factor construction is a method to synthetically create a portfolio based on given factor. The way to do this generally is to sort the security universe into 10 deciles ordered by some variable representing factor and then we go long for first decile and short on last decile. Intuition : We can express our bet on factor via synthetically creating a portfolio expressing the theme. BAB refers to Betting against beta strategy. In simple terms, Long low beta securities and short high beta securities in a way that net position is dollar neutral. Intuition: Leverage constrained investors like pension funds, buy high beta securities to replicate effect of leverage. This drives up their price and convergence to intrinsic value forces rational expected returns to fall. What is Momentum? Momentum is a factor where we go long the winners and short the losers. Intuition : Price Inertia How to add an index to the framework? To add a Index in this Framework, Add a csv file in data/index_csv IMPORTANT : The CSV file should have a SYMBOL Feature. Refer 'data/index_csv/SP500.csv' to see the formatting. Also, Here's an example of code that downloads SP500 index from Wikipedia import pandas as pd try : table = pd . read_html( 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies' ) df = table[ 0 ] df . to_csv( 'data/index_csv/SP500.csv' ) except : print ( \"Error in downloading SP500 index\" ) What do you mean by Tracker and Tracker Config? Tracker represent a config file that framework uses to download the data. If Tracker is not set then the Visualization/Hedging Pages won't work. Available Tracker: This displays available config files with 'name' representing name of Index, 'tickers' represent number of tickers found in that index, 'current children' represents the number of stock data downloaded. Set Tracker: This will fetch all available trackers and point framework to the selected tracker. How to add a feature to the data lake? To add a feature(s) to all the data, you can create a custom indicator Here's a sample code of an indicator stored in ' src/features/indicators from src.features.features import Feature class Custom_indicator (Feature): def init ( self , name, parent, requires = [ \"Open\" , \"Close\" ]): self . name = name self . requires = requires self . parent = parent self . register() def indicator ( self , data): ans = data ans = ans . rename(columns = { \"Open\" : \"Feature1\" , \"Close\" : \"Feature3\" }) return ans Class Description: The class inherits Feature class, so that the framework can read, & register the custom indicator. The requires parameter can be used to fetch previous features for example in this case, I'm pulling the Open and Close of stock and performing simple renaming on that DataFrame. Usage: The custom indicator is accessed through ' src/pages/data ' file where it dumps the indicator into pickle file stored at ' data/features/__name__ ' with a reference of the parent object and then we can use apply feature function to add those indicator. c = Custom_indicator( name = \"Custom\" , parent =gov.population[loc[ 0 ]]) How to use Viz Visualization Page has multiple functions to play with: Check Dataset : Pulls up a particular stock and display the data Plot Multiple Tickers into one graph : The name defines itself. At the backend, it pulls up selected stock, chooses the target variable, and use Altair library for plotting. Add Features : Used to add custom indicators to the data lake. Custom Indicator could be anything, for example, Simple Moving Average. Remove Features : Used to delete features from the data How to create factor? The factors construction code is stored in ' src/hedging/factors '. I have constructed two different types of parsers to incorporate this factors into the framework. FYI, this parsers are called from ' src/pages/hedging '. Refer functions, Hedge and Hedge_Dataframe to see how this factors are parsed and how the dollar neutral hedging is performed. Here's Psuedo Code for Beta against Beta Strategy:","title":"Frequently Asked Questions"},{"location":"Frequently%20Asked%20Questions/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"Frequently%20Asked%20Questions/#what-is-hedging","text":"Hedging is a risk management strategy employed to offset losses in investments by taking an opposite position in a related asset. The best way to understand hedging is to think of it as a form of insurance. When people decide to hedge, they are insuring themselves against a negative event's impact on their finances. This doesn't prevent all negative events from happening. However, if a negative event does happen and you're properly hedged, the impact of the event is reduced. In practice, hedging occurs almost everywhere. For example, if you buy homeowner's insurance, you are hedging yourself against fires, break-ins, or other unforeseen disasters. Source","title":"What is hedging?"},{"location":"Frequently%20Asked%20Questions/#what-is-etf","text":"An exchange traded fund (ETF) is a basket of securities that trade on an exchange, just like a stock. ETF share prices fluctuate all day as the ETF is bought and sold; this is different from mutual funds that only trade once a day after the market closes. ETFs can contain all types of investments including stocks, commodities, or bonds; some offer U.S. only holdings, while others are international. ETFs offer low expense ratios and fewer broker commissions than buying the stocks individually. Source","title":"What is ETF?"},{"location":"Frequently%20Asked%20Questions/#what-is-factor-construction","text":"Factor construction is a method to synthetically create a portfolio based on given factor. The way to do this generally is to sort the security universe into 10 deciles ordered by some variable representing factor and then we go long for first decile and short on last decile. Intuition : We can express our bet on factor via synthetically creating a portfolio expressing the theme. BAB refers to Betting against beta strategy. In simple terms, Long low beta securities and short high beta securities in a way that net position is dollar neutral. Intuition: Leverage constrained investors like pension funds, buy high beta securities to replicate effect of leverage. This drives up their price and convergence to intrinsic value forces rational expected returns to fall.","title":"What is Factor Construction?"},{"location":"Frequently%20Asked%20Questions/#what-is-momentum","text":"Momentum is a factor where we go long the winners and short the losers. Intuition : Price Inertia","title":"What is Momentum?"},{"location":"Frequently%20Asked%20Questions/#how-to-add-an-index-to-the-framework","text":"To add a Index in this Framework, Add a csv file in data/index_csv IMPORTANT : The CSV file should have a SYMBOL Feature. Refer 'data/index_csv/SP500.csv' to see the formatting. Also, Here's an example of code that downloads SP500 index from Wikipedia import pandas as pd try : table = pd . read_html( 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies' ) df = table[ 0 ] df . to_csv( 'data/index_csv/SP500.csv' ) except : print ( \"Error in downloading SP500 index\" ) What do you mean by Tracker and Tracker Config? Tracker represent a config file that framework uses to download the data. If Tracker is not set then the Visualization/Hedging Pages won't work. Available Tracker: This displays available config files with 'name' representing name of Index, 'tickers' represent number of tickers found in that index, 'current children' represents the number of stock data downloaded. Set Tracker: This will fetch all available trackers and point framework to the selected tracker.","title":"How to add an index to the framework?"},{"location":"Frequently%20Asked%20Questions/#how-to-add-a-feature-to-the-data-lake","text":"To add a feature(s) to all the data, you can create a custom indicator Here's a sample code of an indicator stored in ' src/features/indicators from src.features.features import Feature class Custom_indicator (Feature): def init ( self , name, parent, requires = [ \"Open\" , \"Close\" ]): self . name = name self . requires = requires self . parent = parent self . register() def indicator ( self , data): ans = data ans = ans . rename(columns = { \"Open\" : \"Feature1\" , \"Close\" : \"Feature3\" }) return ans Class Description: The class inherits Feature class, so that the framework can read, & register the custom indicator. The requires parameter can be used to fetch previous features for example in this case, I'm pulling the Open and Close of stock and performing simple renaming on that DataFrame. Usage: The custom indicator is accessed through ' src/pages/data ' file where it dumps the indicator into pickle file stored at ' data/features/__name__ ' with a reference of the parent object and then we can use apply feature function to add those indicator. c = Custom_indicator( name = \"Custom\" , parent =gov.population[loc[ 0 ]])","title":"How to add a feature to the data lake?"},{"location":"Frequently%20Asked%20Questions/#how-to-use-viz","text":"Visualization Page has multiple functions to play with: Check Dataset : Pulls up a particular stock and display the data Plot Multiple Tickers into one graph : The name defines itself. At the backend, it pulls up selected stock, chooses the target variable, and use Altair library for plotting. Add Features : Used to add custom indicators to the data lake. Custom Indicator could be anything, for example, Simple Moving Average. Remove Features : Used to delete features from the data","title":"How to use Viz"},{"location":"Frequently%20Asked%20Questions/#how-to-create-factor","text":"The factors construction code is stored in ' src/hedging/factors '. I have constructed two different types of parsers to incorporate this factors into the framework. FYI, this parsers are called from ' src/pages/hedging '. Refer functions, Hedge and Hedge_Dataframe to see how this factors are parsed and how the dollar neutral hedging is performed. Here's Psuedo Code for Beta against Beta Strategy:","title":"How to create factor?"},{"location":"Navigation/","text":"Project Structure . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 features # CUSTOM FEATURES BACKUP \u2502 \u251c\u2500\u2500 images # IMAGES TO USE IN STREAMLIT APP \u2502 \u2514\u2500\u2500 index_csv # STORE INDEX FILES HERE \u251c\u2500\u2500 logs #TO STORE LOGS \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 eda #EXPLORATORY DATA ANALYSIS TOOL \u2502 \u2502 \u251c\u2500\u2500 child.py \u2502 \u2502 \u251c\u2500\u2500 government.py \u2502 \u2502 \u251c\u2500\u2500 graphs.py \u2502 \u2502 \u251c\u2500\u2500 hyperparameter.py \u2502 \u2502 \u251c\u2500\u2500 input.py \u2502 \u2502 \u2514\u2500\u2500 parent.py \u2502 \u251c\u2500\u2500 errors.py # TODO: USER DEFINED ERRORS \u2502 \u251c\u2500\u2500 features # FEATURE CONSTRUCTION \u2502 \u2502 \u251c\u2500\u2500 features.py \u2502 \u2502 \u2514\u2500\u2500 indicators \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 custom_indicator.py \u2502 \u251c\u2500\u2500 hedging # HEDGING PAGE FLOW \u2502 \u2502 \u251c\u2500\u2500 caller.py \u2502 \u2502 \u251c\u2500\u2500 division.py \u2502 \u2502 \u251c\u2500\u2500 factors #FACTOR CONSTRUCTION \u2502 \u2502 \u2502 \u251c\u2500\u2500 beta.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 momentum.py \u2502 \u2502 \u2514\u2500\u2500 parser.py \u2502 \u251c\u2500\u2500 helper.py #GLOBAL FUNCTIONS SUPPORT FILE \u2502 \u251c\u2500\u2500 main.py #MAIN RUNNER OF THE APP \u2502 \u251c\u2500\u2500 pages # FRONT END \u2502 \u2502 \u251c\u2500\u2500 about.py \u2502 \u2502 \u251c\u2500\u2500 data.py \u2502 \u2502 \u251c\u2500\u2500 gallery \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 readme.md \u2502 \u2502 \u251c\u2500\u2500 hedging.py \u2502 \u2502 \u251c\u2500\u2500 home.py \u2502 \u2502 \u2514\u2500\u2500 readme.md \u2502 \u2514\u2500\u2500 readme.md \u251c\u2500\u2500 stream.py # TODO: CREATE RUN.SH \u251c\u2500\u2500 tests \u2502 \u2514\u2500\u2500 code_test \u2502 \u2514\u2500\u2500 test_example.py #TEST FILE","title":"Navigation"},{"location":"Navigation/#project-structure","text":". \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 features # CUSTOM FEATURES BACKUP \u2502 \u251c\u2500\u2500 images # IMAGES TO USE IN STREAMLIT APP \u2502 \u2514\u2500\u2500 index_csv # STORE INDEX FILES HERE \u251c\u2500\u2500 logs #TO STORE LOGS \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 eda #EXPLORATORY DATA ANALYSIS TOOL \u2502 \u2502 \u251c\u2500\u2500 child.py \u2502 \u2502 \u251c\u2500\u2500 government.py \u2502 \u2502 \u251c\u2500\u2500 graphs.py \u2502 \u2502 \u251c\u2500\u2500 hyperparameter.py \u2502 \u2502 \u251c\u2500\u2500 input.py \u2502 \u2502 \u2514\u2500\u2500 parent.py \u2502 \u251c\u2500\u2500 errors.py # TODO: USER DEFINED ERRORS \u2502 \u251c\u2500\u2500 features # FEATURE CONSTRUCTION \u2502 \u2502 \u251c\u2500\u2500 features.py \u2502 \u2502 \u2514\u2500\u2500 indicators \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 custom_indicator.py \u2502 \u251c\u2500\u2500 hedging # HEDGING PAGE FLOW \u2502 \u2502 \u251c\u2500\u2500 caller.py \u2502 \u2502 \u251c\u2500\u2500 division.py \u2502 \u2502 \u251c\u2500\u2500 factors #FACTOR CONSTRUCTION \u2502 \u2502 \u2502 \u251c\u2500\u2500 beta.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 momentum.py \u2502 \u2502 \u2514\u2500\u2500 parser.py \u2502 \u251c\u2500\u2500 helper.py #GLOBAL FUNCTIONS SUPPORT FILE \u2502 \u251c\u2500\u2500 main.py #MAIN RUNNER OF THE APP \u2502 \u251c\u2500\u2500 pages # FRONT END \u2502 \u2502 \u251c\u2500\u2500 about.py \u2502 \u2502 \u251c\u2500\u2500 data.py \u2502 \u2502 \u251c\u2500\u2500 gallery \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 readme.md \u2502 \u2502 \u251c\u2500\u2500 hedging.py \u2502 \u2502 \u251c\u2500\u2500 home.py \u2502 \u2502 \u2514\u2500\u2500 readme.md \u2502 \u2514\u2500\u2500 readme.md \u251c\u2500\u2500 stream.py # TODO: CREATE RUN.SH \u251c\u2500\u2500 tests \u2502 \u2514\u2500\u2500 code_test \u2502 \u2514\u2500\u2500 test_example.py #TEST FILE","title":"Project Structure"},{"location":"misc/","text":"Misc Future Work Add more Factors Incorporate TA-Lib with Feature set Add multiple user interface Checkout more TODOs on Github Page Limitations/TODOs Add hedge execution services for our premium clients for subscriptional basis.","title":"Misc"},{"location":"misc/#misc","text":"","title":"Misc"},{"location":"misc/#future-work","text":"Add more Factors Incorporate TA-Lib with Feature set Add multiple user interface Checkout more TODOs on Github Page","title":"Future Work"},{"location":"misc/#limitationstodos","text":"Add hedge execution services for our premium clients for subscriptional basis.","title":"Limitations/TODOs"},{"location":"usage/","text":"Usage Command Line Installation git clone https://github.com/adityavyasbme/GetSetHedge #Clone this repo cd GetSetHedge #Go into the folder pip install -r requirements.txt #Install the required files pip install yfinance #Confirm install of yfinance library Running the app streamlit run stream.py #Run the app","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#command-line-installation","text":"git clone https://github.com/adityavyasbme/GetSetHedge #Clone this repo cd GetSetHedge #Go into the folder pip install -r requirements.txt #Install the required files pip install yfinance #Confirm install of yfinance library","title":"Command Line Installation"},{"location":"usage/#running-the-app","text":"streamlit run stream.py #Run the app","title":"Running the app"}]}